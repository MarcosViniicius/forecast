import requests
from datetime import datetime, timedelta
from config import weather_cache, logger
import os

def obter_previsao_tempo(latitude, longitude):
    """
    Obt√©m a previs√£o do tempo com cache para evitar muitas requisi√ß√µes
    """
    try:
        # Verifica se h√° dados em cache v√°lidos
        if (weather_cache['data'] and weather_cache['timestamp'] and 
            datetime.now() - weather_cache['timestamp'] < timedelta(minutes=weather_cache['cache_duration'])):
            logger.info("Usando dados do cache")
            return weather_cache['data']
        
        api_key = os.getenv("WEATHERAPI_KEY")
        if not api_key:
            logger.error("Chave da API do WeatherAPI n√£o configurada")
            return None
        
        url = f"http://api.weatherapi.com/v1/forecast.json?key={api_key}&q={latitude},{longitude}&days=7&aqi=yes&alerts=yes"
        
        logger.info(f"Fazendo requisi√ß√£o para API do tempo: {url}")
        response = requests.get(url, timeout=10)
        
        if response.status_code != 200:
            logger.error(f"Erro na API: {response.status_code} - {response.text}")
            return None
        
        data = response.json()
        
        # Atualiza o cache
        weather_cache['data'] = data
        weather_cache['timestamp'] = datetime.now()
        
        logger.info("Dados de previs√£o atualizados com sucesso")
        return data
        
    except requests.exceptions.RequestException as e:
        logger.error(f"Erro de conex√£o com a API: {e}")
        return None
    except Exception as e:
        logger.error(f"Erro inesperado ao obter previs√£o: {e}")
        return None

def formatar_condicao_tempo(condicao_en):
    """
    Traduz condi√ß√µes do tempo para portugu√™s
    """
    traducoes = {
        'Clear': 'C√©u limpo',
        'Sunny': 'Ensolarado',
        'Partly cloudy': 'Parcialmente nublado',
        'Cloudy': 'Nublado',
        'Overcast': 'Encoberto',
        'Mist': 'N√©voa',
        'Patchy rain possible': 'Possibilidade de chuva isolada',
        'Light rain': 'Chuva leve',
        'Moderate rain': 'Chuva moderada',
        'Heavy rain': 'Chuva forte',
        'Thundery outbreaks possible': 'Possibilidade de trovoadas',
        'Fog': 'N√©voa densa'
    }
    return traducoes.get(condicao_en, condicao_en)

def obter_emoji_tempo(condicao):
    """
    Retorna emoji apropriado para a condi√ß√£o do tempo
    """
    emojis = {
        'Clear': '‚òÄÔ∏è', 'Sunny': '‚òÄÔ∏è',
        'Partly cloudy': '‚õÖ', 'Cloudy': '‚òÅÔ∏è',
        'Overcast': '‚òÅÔ∏è', 'Mist': 'üå´Ô∏è',
        'Fog': 'üå´Ô∏è', 'Light rain': 'üå¶Ô∏è',
        'Moderate rain': 'üåßÔ∏è', 'Heavy rain': '‚õàÔ∏è',
        'Thundery outbreaks possible': '‚õàÔ∏è'
    }
    
    for key, emoji in emojis.items():
        if key.lower() in condicao.lower():
            return emoji
    return 'üå§Ô∏è' 