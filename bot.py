import os
import threading
import asyncio
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler
from config import logger, UPDATE_INTERVAL, ALERT_THRESHOLD
from handlers import available_commands, available_callbacks
from user_config import user_config

def main():
    """
    Fun√ß√£o principal que inicia o bot
    """
    # Verifica vari√°veis de ambiente
    telegram_token = os.getenv("TELEGRAM_BOT_TOKEN")
    weather_api_key = os.getenv("WEATHERAPI_KEY")
    
    if not telegram_token:
        logger.error("TELEGRAM_BOT_TOKEN n√£o configurado")
        print("‚ùå Configure a vari√°vel de ambiente TELEGRAM_BOT_TOKEN")
        exit(1)
    
    if not weather_api_key:
        logger.error("WEATHERAPI_KEY n√£o configurado")
        print("‚ùå Configure a vari√°vel de ambiente WEATHERAPI_KEY")
        exit(1)
    
    # Carrega configura√ß√µes do usu√°rio
    location = user_config.get_location()
    
    logger.info("Iniciando Bot de Previs√£o do Tempo")
    print(f"ü§ñ Iniciando Bot de Previs√£o do Tempo")
    print(f"üìç Local padr√£o: {location['cidade']}/{location['estado']}")
    print(f"‚è∞ Intervalo de verifica√ß√£o: {UPDATE_INTERVAL} minutos")
    print(f"üö® Limite de alerta: {ALERT_THRESHOLD}% de chance de chuva")
    
    # Configura o bot do Telegram
    app = ApplicationBuilder().token(telegram_token).build()
    
    # Registra os comandos
    for comando, handler in available_commands.items():
        app.add_handler(CommandHandler(comando, handler))
        logger.info(f"Comando /{comando} registrado")
    
    # Adiciona handler para bot√µes
    app.add_handler(CallbackQueryHandler(button_handler))
    
    print("\n‚úÖ Bot configurado e pronto!")
    print("üì± Comandos dispon√≠veis:")
    for comando in available_commands:
        print(f"   ‚Ä¢ /{comando}")
    
    try:
        # Inicia o bot
        logger.info("Bot iniciado e rodando...")
        app.run_polling()
    except KeyboardInterrupt:
        logger.info("Bot interrompido pelo usu√°rio")
        print("\nüõë Bot interrompido pelo usu√°rio")
    except Exception as e:
        logger.error(f"Erro cr√≠tico no bot: {e}")
        print(f"\n‚ùå Erro cr√≠tico: {e}")
    finally:
        logger.info("Bot finalizado")
        print("üëã Bot finalizado!")

async def button_handler(update, context):
    """
    Manipula os bot√µes interativos do menu
    """
    query = update.callback_query
    await query.answer()
    
    try:
        if query.data in available_callbacks:
            await available_callbacks[query.data](update, context)
        else:
            logger.warning(f"Callback n√£o tratado: {query.data}")
            if query.message:
                await query.message.edit_text(
                    "‚ùå Op√ß√£o inv√°lida ou n√£o implementada",
                    parse_mode='Markdown'
                )
            
    except Exception as e:
        logger.error(f"Erro no button_handler: {e}")
        if query.message:
            await query.message.edit_text(
                "‚ùå Ocorreu um erro ao processar sua solicita√ß√£o. Tente novamente.",
                parse_mode='Markdown'
            )

if __name__ == "__main__":
    main() 